{# Copyright (C) 2012 - 2014 Open Source Matters, Inc. All rights reserved. #}
{# GNU General Public License version 2 or later; see LICENSE.txt #}

{% extends "index.twig" %}

{% block title %}{{ "Issues List"|_ }}{% endblock %}

{% block headerText %} - {{ project.short_title }}{% endblock %}

{% block headerCSS %}
    <link href="{{ uri.base.path }}jtracker/pagination/css/pagination.css" rel="stylesheet" media="screen">
    <link href="{{ uri.base.path }}jtracker/pagination/css/B_black.css" rel="stylesheet" media="screen">
{% endblock %}

{% block prependMenu %}
    {% if user.check("create") %}
        <li>
            <a class="btn-success" href="{{ uri.base.path }}tracker/{{ project.alias }}/add">
                {{ "New Item"|_ }}
            </a>
        </li>
    {% endif %}

    {{ parent() }}

{% endblock %}

{% block content %}
    {% import "tracker.filters.twig" as filters %}

    <div id="issuesForm" class="form-inline form-search">
        <div class="filters btn-toolbar clearfix">
            <div class="clearfix">
                <div class="btn-group pull-left" data-toggle="buttons-checkbox" id="filter-state-div">
                    <button type="button"
                            class="btn{% if state.get('filter.state') == 0 %} active btn-success {% endif %}"
                            value="0">
                        {{ 'Open'|_ }}
                    </button>
                    <button type="button"
                            class="btn{% if state.get('filter.state') == 1 %} active btn-danger {% endif %}"
                            value="1">
                        {{ 'Closed'|_ }}
                    </button>
                </div>
                <div id="stools-button" class="btn-group">
                    <button type="button" class="btn pull-left" data-toggle="collapse" data-target="#stools-container">
                        {{ 'Search tools'|_ }}
                        <b class="caret"></b>
                    </button>
                </div>
                <div class="btn-group">
                    <button class="btn" id="button-remove" type="button">{{ 'Clear'|_ }}</button>
                </div>
                <a class="btn pull-right" href="{{ uri.base.path }}tracker/{{ project.alias }}/random">
                    {{ 'Feeling Lucky'|_ }}
                </a>
                <a class="btn pull-right" id="permalink" href="javascript:">
                    {{ 'Permalink'|_ }}
                </a>
            </div>

            <div id="stools-container" class="collapse
            {% if state.get('filter.status')
            or state.get('filter.priority')
            or state.get('filter.search')
            or state.get('filter.sort')
            or state.get('filter.user')
            or state.get('filter.created_by')
            or state.get('filter.category')
            or state.get('filter.tests')
            or state.get('filter.easytest')
            or state.get('stools-active') %}
                in
            {% endif %}
            clearfix pull-left">
                <div class="filter-search btn-group input-append">
                    <label class="filter-search-lbl element-invisible"
                           for="filter-search">{{ 'Filter the list by summary or description.'|_ }}</label>
                    <input type="text" class="toclear search-query input-xlarge" name="filter-search" id="filter-search"
                           value="{{ state.get('filter.search') }}"
                           title="{{ translate('Filter the list by ID, summary, or description.') }}"
                           placeholder="{{ translate('Filter the list by ID, summary, or description.') }}"/>
                    <button class="btn button-submit" type="button">
                        <span class="icon-search"></span></button>
                </div>
                {% if (state.get('filter.state') == 0) %}
                    {% set openState = '' %}
                    {% set closedState = ' style="display: none"' %}
                {% else %}
                    {% set openState = ' style="display: none"' %}
                    {% set closedState = '' %}
                {% endif %}
                <div id="status-open" class="btn-group"{{ openState|raw }}>
                    {{ filters.status(state.get('filter.status'), 'filter-status-open', 'toclear input-medium-160', 0) }}
                </div>
                <div id="status-closed" class="btn-group"{{ closedState|raw }}>
                    {{ filters.status(state.get('filter.status'), 'filter-status-closed', 'toclear input-medium-160', 1) }}
                </div>
                <div class="btn-group">
                    {{ filters.category(state.get('filter.category'), 'filter-category', 'toclear selectpicker', project.categories) }}
                </div>
                <div class="btn-group">
                    {{ filters.label(state.get('filter.label'), 'filter-label', 'toclear selectpicker', project.labels) }}
                </div>
                <div class="filter-search btn-group input-append">
                    <label class="filter-search-lbl element-invisible"
                           for="filter-created_by">{{ 'Filter the list by creator.'|_ }}</label>
                    <input type="text" class="toclear search-query input-medium" name="filter-created_by" id="filter-created_by"
                           value="{{ state.get('filter.created_by') }}"
                           title="{{ translate('Filter the list by creator.') }}"
                           placeholder="{{ translate('Filter the list by creator.') }}"/>
                    <button class="btn button-submit" type="button">
                        <span class="icon-search"></span></button>
                </div>
                <div class="btn-group">
                    {{ filters.priority(state.get('filter.priority'), 'filter-priority', 'toclear input-small-120') }}
                </div>
                <div class="btn-group">
                    {{ filters.tests(state.get('filter.tests'), 'filter-tests', 'toclear input-medium-140') }}
                </div>
                <div class="btn-group">
                    {{ filters.easytest(state.get('filter.easytest'), 'filter-easytest', 'toclear input-small') }}
                </div>
                {% if user.username %}
                    <div class="btn-group">
                        {{ filters.user(state.get('filter.user'), 'filter-user', 'input-medium-180') }}
                    </div>
                {% endif %}
                <div class="btn-group">
                    {{ filters.sort(state.get('filter.sort'), 'filter-sort', 'input-medium-180') }}
                </div>
            </div>

            <input type="hidden" name="filter-state" id="filter-state" value="{{ state.get('filter.state') }}"/>
            <input type="hidden" name="stools-active" id="stools-active" value="{{ state.get('stools-active') }}"/>
        </div>
        <table class="table table-bordered table-striped table-condensed" id="issuesList">
            <thead>
            <tr>
                <th width="2%" class="nowrap center">{{ 'ID'|_ }}</th>
                <th>{{ 'Summary'|_ }}</th>
                <th width="5%" class="center">{{ 'Priority'|_ }}</th>
                <th width="10%" class="center">{{ 'Status'|_ }}</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td class="center" colspan="4">{{ 'Loading, please wait...'|_ }}</td>
            </tr>
            </tbody>

        </table>
    </div>

    <ul id="pagination" class="trackerPagination"></ul>

    <input type="hidden" name="page" id="page" value="{{ state.get('page') }}"/>

    <!-- ++++++++++++++++++++++++++ -->
    <!-- +  JavaScript templates  + -->
    <!-- ++++++++++++++++++++++++++ -->


    <!--
    @todo This is to retrieve extended information on an issue - review

    @todo add much more info =;)

<script type="text/x-tmpl" id="tplIssueInfo">
    <ul class="unstyled">
        <li>Opened by: [%= o.opened_by %]</li>
        <li>Comments: [%= o.comment_count %]</li>
    </ul>
</script>
    -->
{% endblock %}

{% block JavaScriptBottom %}

    {{ parent() }}

    <script src="{{ uri.base.path }}vendor/bootstrap/js/bootstrap-tooltip.js"></script>
    <script src="{{ uri.base.path }}vendor/bootstrap/js/bootstrap-popover.js"></script>
    <script src="{{ uri.base.path }}vendor/blueimp-tmpl/js/tmpl{{ jdebug ? "" : ".min" }}.js"></script>
    <script src="{{ uri.base.path }}jtracker/blueimp-tmpl/js/jtracker-tmpl{{ jdebug ? "" : ".min" }}.js"></script>
    <script src="{{ uri.base.path }}vendor/twbs-pagination/jquery.twbsPagination{{ jdebug ? "":".min" }}.js"></script>

    <script type="text/x-tmpl" id="ajaxListing">
    [% if (o.data.items.length) { %]
        [% for (var i = 0; i < o.data.items.length ; i++) { %]
            [% var item = o.data.items[i]; %]
            [% var rowClass = ''; %]
            [% var blockers = [1,2]; %]
            [% if (item.priority in blockers) { %]
                [% rowClass = 'class=error';
            } %]
            [% if (item.status === '4') { %]
               [% rowClass = 'class=success';
            } %]

            <tr [%= rowClass %]>
                <td class="center valign-center">
                    [%= item.issue_number %]
                </td>
                <td class="hasContext">
                    {% if user.check("edit") %}
                        <a class="pull-right btn btn-small" href="{{ uri.base.path }}tracker/{{ project.alias }}/[%= item.issue_number %]/edit">
                            <span data-icon="&#xe003;"></span>
                        </a>
                    {% endif %}
                    <a class="list-issue-title" href="{{ uri.base.path }}tracker/{{ project.alias }}/[%= item.issue_number %]">
                        [%= item.title %]
                    </a>
                    [% print(item.labelHtml,true); %]
                    [% if (item.categories.length) { %]
                        <br/>
                        [% for (var n=0, category; category=item.categories[n]; n++) { %]
                            <a href="{{ uri.base.path ~ 'tracker/' ~ project.alias ~ '/?category=' }}[%= category.alias %]">
                                <span class="label" style="background-color:#[%= category.color %]; color:[%= JTracker.getContrastColor(category.color) %];">
                                    [%= category.title %]
                                </span>
                            </a>
                        [% } %]
                    [% } %]
                    <br/>
                    <span class="list-issue-details">
                        [% if (item.opened_by) { %]
                            {{ 'Created by'|_ }}
                            [% if (item.user_id) { %]
                                <a href="{{ uri.base.path ~ 'user/' }}[%= item.user_id %]">[%= item.opened_by %]</a>
                            [% } else { %]
                                [%= item.opened_by %]
                            [% } %]
                            &nbsp;&bull;&nbsp;
                        [% } %]
                        {% if project.gh_user and project.gh_project %}
                          {{ 'GitHub ID'|_ }}
                          <a href="https://github.com/{{ project.gh_user }}/{{ project.gh_project }}/issues/[%=item.issue_number%]"
                             target="_blank">
                             [%= item.issue_number %]
                          </a>
                          &nbsp;&bull;&nbsp;
                        {% endif %}
                        [% if (item.foreign_number) { %]
                            {{ 'Foreign ID'|_ }}
                            <a href="http://joomlacode.org/gf/project/joomla/tracker/?action=TrackerItemEdit&tracker_item_id=[%= item.foreign_number %]"
                               target="_blank">
                               [%= item.foreign_number %]
                            </a>
                        [% } %]
                        [% if (item.opened_date) { %]
                            {{ 'Opened '|_ }} [%= item.opened_date %]
                            &nbsp;&bull;&nbsp;
                        [% } %]
                        [% if (item.closed_status != '0') { %]
                            {{ 'Closed '|_ }} [%= item.closed_date %]
                            &nbsp;&bull;&nbsp;
                        [% } %]
                        [% if (item.modified_date != '-0001-11-30') { %]
                            {{ 'Modified '|_ }} [%= item.modified_date %]
                        [% } %]
                    </span>
                </td>
                <td class="center valign-center">
                    [% var priorities = {1: '{{ 'Critical'|_ }}', 2: '{{ 'Urgent'|_ }}', 3: '{{ 'Medium'|_ }}', 4: '{{ 'Low'|_ }}', 5: '{{ 'Very low'|_ }}'  }; %]
                    <span class="badge [%=prioClass(item.priority)%] ">[%=priorities[item.priority]%]</span>
                 </td>
                <td class="center valign-center">
                    [%= translateStatus(item.status) %]
                    [% if(item.merge_state) { %]
                        <br />
                        <span class="badge badge-[%= getMergeStateClass(item.merge_state) %] " title="{{ 'GitHub merge status'|_ }}">
                            [%= translateMergeState(item.merge_state) %]
                        </span>
                    [% } %]
                </td>
            </tr>
        [% } %]
    [% } else { %]
        <tr>
            <td class="center" colspan="4">
                {{ 'No items found.'|_ }}
            </td>
        </tr>
    [% } %]


    </script>

    <script type="text/javascript">
        // Get issues list
        getListItems();
        /*
         @todo This is to retrieve extended information on an issue - review

         $('*[data-issue]').click(
         function () {
         var el = $(this);
         $.get(el.data('issue'), function(r) {
         el.popover({
         content: tmpl("tplIssueInfo", r.data),
         html: true
         }).popover('show');
         });
         el.unbind('click');
         return false;
         }
         );
         */

        $('[id^=filter]').change(function () {
                $('#page').val(0);
                getListItems();
            }
        );

        $('#filter-state-div button').click(
                function () {
                    var val = $(this).val();
                    $('#filter-state').val(val);

                    if (val == 0) {
                        $(this).addClass("active btn-success");
                        $(this).next().removeClass("active btn-danger");
                        $('#status-open').show();
                        $('#status-closed').hide();
                    } else {
                        $(this).addClass("active btn-danger");
                        $(this).prev().removeClass("active btn-success");
                        $('#status-open').hide();
                        $('#status-closed').show();
                    }

                    $('#page').val(0);
                    getListItems();
                }
        );

        $("#button-remove").click(function () {
            $('[class^=toclear]').val('');
            $('#filter-user').val(0);
            $('#filter-sort').val(0);
            getListItems();
        });

        $(".button-submit").click(function () {
            getListItems();
        });

        function prioClass(priority) {
            priority = parseInt(priority);
            switch (priority) {
                case 1 :
                    return 'badge-important';
                case 2 :
                    return 'badge-warning';
                case 3 :
                    return 'badge-info';
                case 4 :
                    return 'badge-inverse';
                default :
                    return '';
            }
        }

        function getMergeStateClass(status) {
            switch (status) {
                case 'success' :
                    return 'success';
                case 'pending' :
                    return 'warning';
                case 'error' :
                case 'failure' :
                    return 'important';
            }

            return '';
        }

        function translateMergeState(state)
        {
            switch (state)
            {
                case 'success':
                    return '{{ 'Success'|_ }}';
                case 'pending':
                    return '{{ 'Pending'|_ }}';
                case 'error':
                    return '{{ 'Error'|_ }}';
                case 'failure':
                    return '{{ 'Failure'|_ }}';
            }

            return '?';
        }

        function translateStatus(id)
        {
            statuses = [];
            statuses['1'] = '{{ 'New'|_ }}';
            statuses['2'] = '{{ 'Confirmed'|_ }}';
            statuses['3'] = '{{ 'Pending'|_ }}';
            statuses['4'] = '{{ 'Ready To Commit'|_ }}';
            statuses['5'] = '{{ 'Fixed in Code Base'|_ }}';
            statuses['6'] = '{{ 'Needs Review'|_ }}';
            statuses['7'] = '{{ 'Information Required'|_ }}';
            statuses['8'] = '{{ 'Unconfirmed Report'|_ }}';
            statuses['9'] = '{{ 'No Reply'|_ }}';
            statuses['10'] = '{{ 'Closed'|_ }}';
            statuses['11'] = '{{ 'Expected Behaviour'|_ }}';
            statuses['12'] = '{{ 'Known Issue'|_ }}';
            statuses['13'] = '{{ 'Duplicate Report'|_ }}';

            return statuses[id];
        }

        function getListItems() {
            $('#pagination').remove();
            $('#issuesForm').after('<ul id="pagination" class="trackerPagination"></ul>');
            $('#issuesList tbody').animate({opacity: 0.3}, 100);
            var active = $('#stools-active').val();
            var search = $('#filter-search').val();
            var state = $('#filter-state').val();

            if (state == 0) {
                var status = $('#filter-status-open').val();
            }

            if (state == 1) {
                var status = $('#filter-status-closed').val();
            }

            var priority = $('#filter-priority').val();
            var sort = $('#filter-sort').val();
            var user = $('#filter-user').val();
            var created_by = $('#filter-created_by').val();
            var category = $('#filter-category').val();
            var label = $('#filter-label').val();
            var tests = $('#filter-tests').val();
            var easytest = $('#filter-easytest').val();
            var page = $('#page').val();

            $.ajax({
                type: 'POST',
                url: "{{ uri.base.path }}tracker/{{ project.alias }}/listing-ajax",
                data: {
                    'search': search,
                    'status': status,
                    'priority': priority,
                    'user': user,
                    'created_by': created_by,
                    'sort': sort,
                    'state': state,
                    'category': category,
                    'label': label,
                    'tests': tests,
                    'easytest': easytest,
                    'stools-active': active,
                    'page': page
                },
                success: function (r) {
                    if (r.data.pagesTotal > 1) {
                        $("#pagination").twbsPagination({
                            totalPages: r.data.pagesTotal,
                            visiblePages: 5,
                            startPage: r.data.currentPage,
                            first: '{{ 'First'|_ }}',
                            prev: '{{ 'Previous'|_ }}',
                            next: '{{ 'Next'|_ }}',
                            last: '{{ 'Last'|_ }}',
                            onPageClick: function (event, page) {
                                $('#issuesList tbody').animate({opacity: 0.3}, 100);
                                $.ajax({
                                    type: 'POST',
                                    url: '{{ uri.base.path }}tracker/{{ project.alias }}/listing-ajax?page=' + page,
                                    data: {
                                        'search': search,
                                        'status': status,
                                        'priority': priority,
                                        'user': user,
                                        'created_by': created_by,
                                        'sort': sort,
                                        'state': state,
                                        'category': category,
                                        'label': label,
                                        'tests': tests,
                                        'easytest': easytest,
                                        'stools-active': active
                                    },
                                    success: function (data) {
                                        $('#issuesList tbody').html(tmpl("ajaxListing", data));
                                        $('#issuesList tbody').animate({opacity:1}, 100);
                                    }
                                });
                            }
                        });
                    } else {
                        $("#pagination").html('');
                    }
                    $('#issuesList tbody').html(tmpl("ajaxListing", r));
                    $('#issuesList tbody').animate({opacity: 1}, 100);

                    var categoryText = $('#filter-category option:selected').text();

                    $('#permalink').attr('href', getPermaLink(
                            search, status, priority, user, sort, state, category, categoryText, label, tests, easytest, created_by
                    ));
                }
            });
        }

        function getPermaLink(search, status, priority, user, sort, state, category, categoryText, label, tests, easytest, created_by) {
            var permaLink = '{{ uri.base.path }}tracker/{{ project.alias }}/?';
            var filters = [];
            var stools = [];

            // Replace non alpha numeric chars with dash
            categoryText = categoryText.replace(/[\W_]+/g,'-');

            // Remove the last dash if exists
            if (categoryText.charAt(categoryText.length - 1) == '-')
            {
                categoryText = categoryText.slice(0, - 1);
            }

            // Process sorting
            sort = parseInt(sort);
            var sorting = '';

            switch (sort) {
                case 1 :
                    sorting = 'sort=issue&direction=asc';
                    break;
                case 2 :
                    sorting = 'sort=updated&direction=desc';
                    break;
                case 3 :
                    sorting = 'sort=updated&direction=asc';
                    break;
                default :
                    sorting = 'sort=issue&direction=desc';
            }

            stools[stools.length] = '' + sorting;

            // Add other filters
            if (state != 0) { filters[filters.length] = 'state=' + state; }

            if (search) { stools[stools.length] = 'search=' + search }
            if (status != 0) { stools[stools.length] = 'status=' + status }
            if (priority != 0) { stools[stools.length] = 'priority=' + priority }
            if (user != 0) { stools[stools.length] = 'user=' + user }
            if (category != 0) { stools[stools.length] = 'category=' + categoryText.toLowerCase() }
            if (label != 0) { stools[stools.length] = 'label=' + label }
            if (tests != 0) { stools[stools.length] = 'tests=' + tests }
            if (easytest != 0) { stools[stools.length] = 'easytest=' + easytest }
            if (created_by != 0) { stools[stools.length] = 'created_by=' + created_by }

            permaLink += filters.length ? filters.join('&') + '&' : '';

            permaLink += stools.length ? stools.join('&') + '&' : '';
            permaLink += stools.length ? 'stools-active=1' : 'stools-active=0';

            return permaLink;
        }

        $('#stools-button button').click(
                function () {
                    var val = $('#stools-active').val();

                    if (val == 0) {
                        $('#stools-active').val(1);
                    } else {
                        $('#stools-active').val(0);
                    }
                }
        );
    </script>

{% endblock %}
